<!-- Start of file install-methods/install-methods.xml -->

<chapter id="install-methods">
 <title
>获取系统安装介质</title>


<!-- Start of file install-methods/official-cdrom.xml -->

 <sect1 id="official-cdrom">
 <title
>官方的 &debian; 光盘套装</title>
<para
>目前安装 &debian; 最容易的方法是使用一个官方的 Debian CD 盘套件。您可以从一个销售商处购买 (参见 <ulink url="&url-debian-cd-vendors;"
>光盘销售商</ulink
>)。如果您有快速的网络连接和光盘刻录机的话，也可以从 Debian 镜像站点下载光盘映像然后自行刻录光盘 (具体参见 <ulink url="&url-debian-cd;"
>Debian CD 页</ulink
>)。如果您有一套 Debian 的 CD 盘套件并且能在您的机器上引导这些 CD 盘，您可以直接跳至 <xref linkend="boot-installer"/>。我们已经做了很多努力来确保 CD 中已经包含了大多数人所需要的文件。尽管一整套预编译的二进制软件包需要好几张 CD 盘，但是 您可能不会用到第三张 CD 盘以后的内容。您也可以可以考虑使用 DVD 版本，这将为您的书架节约很多光盘存放空间，并且您可以避免沉闷地 CD 盘切换。 </para
><para
>如果您的机器不支持 CD 盘引导，但是您有一套 CD 光盘套件，您可以使用其他的方法比如： <phrase condition="supports-floppy-boot"
>软盘、</phrase
> <phrase arch="s390"
>磁带、磁带仿真、</phrase
> <phrase condition="bootable-disk"
>硬盘、</phrase
> <phrase condition="bootable-usb"
>U 盘、</phrase
> <phrase condition="supports-tftp"
>网络引导，</phrase
> 或者从 CD 盘中手工装载内核来初始化系统安装程序。CD 盘已经包含了通过其他方法引导所需要的文件； Debain 的网络存档和 CD 盘的文件夹组织方式是一致的。因此如果后面有给出的用于引导的特定存档文件路径时，请在 CD 盘中同样的文件目录和子目录下查找它们。 </para
><para
>一旦安装程序被引导，它将能够获得 CD 盘中其他所有必需的文件。 </para
><para
>如果您没有一套 CD 光盘套件，则您需要下载安装系统文件并且把他们放到： <phrase arch="s390"
>安装磁带</phrase
> <phrase condition="supports-floppy-boot"
>软盘 或</phrase
> <phrase condition="bootable-disk"
>硬盘 或</phrase
> <phrase condition="bootable-usb"
>U 盘 或</phrase
> <phrase condition="supports-tftp"
>一台连网的计算机上</phrase
> 然后他们可以被用来引导安装程序。 </para>

 </sect1>
<!--   End of file install-methods/official-cdrom.xml -->

<!-- Start of file install-methods/downloading-files.xml -->

 <sect1 id="downloading-files">
 <title
>从 Debian 镜像服务器下载文件</title>

<para
>选择离您较近的(因此很可能也是最快的)镜像服务器，请参见 <ulink url="&url-debian-mirrors;"
>Debian 镜像列表</ulink
>。 </para
><para
>当从 Debian 镜像服务器下载文件的时候，请确认下载的文件是处于<emphasis
>二进制</emphasis
>模式，而不是文本或者自动模式。 </para>

  <sect2 id="where-files">
  <title
>在哪里能找到安装映像</title>

<para
>安装映像位于每一个 Debian 镜像的 <ulink url="&url-debian-installer;/images"
>debian/dists/&releasename;/main/installer-&architecture;/current/images/</ulink
> &mdash; <ulink url="&url-debian-installer;/images/MANIFEST"
>MANIFEST</ulink
> 文件列出了每一个映像及其用途。 </para>


<!-- Start of file install-methods/download/alpha.xml -->


   <sect3 arch="alpha"
><title
>Alpha 的安装文件</title>
<para
>如果您选择通过 <command
>MILO</command
> 来从 ARC 控制台固件引导，就需要从所提供的磁盘映像中准备一张载有 <command
>MILO</command
> 和 <command
>LINLOAD.EXE</command
> 的磁盘。有关 Alpha 固件和启动引导器的更多信息请参见 <xref linkend="alpha-firmware"/> 。软盘映像可以在 <filename
>MILO</filename
> 目录下找到。其形式为： <filename
>milo_<replaceable
>subarchitecture</replaceable
>.bin</filename
>。 </para
><para
>抱歉的是，这些 <command
>MILO</command
> 映像文件未经过足够的测试，也许并不是在所有的子体系下都能正常运行。如果您发现它不能运行，请尝试将合适的 <command
>MILO</command
> 二进制文件拷贝到软盘中(<ulink url="&disturlftp;main/disks-alpha/current/MILO/"
></ulink
>)。注意，这些 <command
>MILO</command
> 不支持 ext2 的<quote
>sparse superblocks</quote
>，因此您不能从新生成的 ext2 文件系统中装载内核。作为一个变通方法，您可以把内核放到 FAT 分区中，紧跟着 <command
>MILO</command
>。 </para
><para
><command
>MILO</command
> 的二进制文件是依赖于具体平台的，请参见 <xref linkend="alpha-cpus"/> 来确认哪一个 <command
>MILO</command
> 映象适用于您的 Alpha 平台。 </para>
   </sect3>
<!--   End of file install-methods/download/alpha.xml -->

<!-- Start of file install-methods/download/arm.xml -->


   <sect3 arch="arm" id="riscpc-install-files">
   <title
>RiscPC 的安装文件</title>
<para
>RiscPC 安装程序最初是从 RiSC OS 引导的。所有必需的文件都由一个名为 &rpc-install-kit; 的档案所提供，请将此文件下载到 RISC OS 机器中，将 <filename
>linloader.!Boot</filename
> 拷贝到合适的位置，然后运行 <filename
>!dInstall</filename
>。 </para>
   </sect3>

   <sect3 arch="arm" id="netwinder-install-files">
   <title
>NetWinder 的安装文件</title>
<para
>启动一台 NetWinder 最轻松的途径是使用所提供的 TFTP 映象文件 &netwinder-boot-img; 进行网络引导。 </para>
   </sect3>

   <sect3 arch="arm" id="cats-install-files">
   <title
>CATS 的安装文件</title>
<para
>在 CATS 上唯一被支持的引导方法是使用组合映像 &cats-boot-img;。它能从任何 Cyclone 启动引导器可以访问的设备上被装载。 </para>
   </sect3>
<!--   End of file install-methods/download/arm.xml -->

<!-- Start of file install-methods/download/powerpc.xml -->

<!-- commented out as it seems out of date and the links are broken

   <sect3 arch="powerpc" id="newworld-install-files">
   <title
>NewWorld MacOS Installation Files </title>
<para>

For floppy-less installation on NewWorld Macs, it may be most
convenient to obtain all the necessary files packaged into one Stuffit
archive from
<ulink url="&url-powerpc-of;"
></ulink
> (separate instructions are
included in the archive). Otherwise, obtain the normal installation
files listed above. Retrieve the files to an HFS (not HFS+) partition
on your system.  You will also need the <filename
>yaboot</filename
> and
<filename
>yaboot.conf</filename
> files from the
<ulink url="&downloadable-file;new-powermac/"
>new-powermac</ulink
> or
<ulink url="&downloadable-file;powermac/"
>powermac</ulink
> archive folder.
However, the newest G4 PowerMacs, and those that work without MacOS 9,
need the newest version of <command
>yaboot</command
>; the one in the
archive will not work. Obtain the newest version from
<ulink url="http://penguinppc.org/projects/yaboot/"
></ulink
>.

</para>
   </sect3>

-->
<!--   End of file install-methods/download/powerpc.xml -->

<!-- Start of file install-methods/download/m68k.xml -->


   <sect3 arch="m68k" id="kernel-22">
   <title
>选择一个内核</title>

<para
>一些 m68k 子体系可以选择要安装的内核。一般来说我们推荐您首先尝试最新的版本。如果您的子体系系统或机器需要使用 2.2.x 版的内核，请确认您选择的是一个支持对应内核的映像。(请参见 <ulink url="&disturl;/main/installer-&architecture;/current/images/MANIFEST"
>MANIFEST</ulink
>)。 </para>
<para
>所有使用 2.2.x 内核的 m68k 的映像都要求使用 &ramdisksize; 内核参数。 </para>
   </sect3>
<!--   End of file install-methods/download/m68k.xml -->

  </sect2>

 </sect1>
<!--   End of file install-methods/downloading-files.xml -->

<!-- Start of file install-methods/ipl-tape.xml -->

 <sect1 arch="s390" id="ipl-tape">
 <title
>创建一个 IPL 磁带</title>

<para
>如果您不能从光盘引导(IPL)并且没有使用 VM，您首先就需要创建一个 IPL 磁带。这在 <ulink url="http://www.redbooks.ibm.com/pubs/pdfs/redbooks/sg246264.pdf"
> Linux for IBM eServer zSeries and S/390: Distributions</ulink
> Redbook 的第 3.4.3 节中有描述。您需要写到磁带上的文件是(按以下顺序): <filename
>kernel.debian</filename
>、<filename
>parmfile.debian</filename
> 和 <filename
>initrd.debian</filename
>。这些文件可以从 <filename
>tape</filename
>子目录下载，请参见 <xref linkend="where-files"/>, </para>
 </sect1>

<!--   End of file install-methods/ipl-tape.xml -->

<!-- Start of file install-methods/create-floppy.xml -->

 <sect1 condition="supports-floppy-boot" id="create-floppy">
 <title
>从软盘映像创建引导软盘</title>
<para
>可启动的软盘一般被视为是在那些不能从光盘或其它方式启动的硬件上引导安装程序的最后一种方法。 </para
><para arch="powerpc"
>有报告说 Mac USB 软盘驱动器不支持引导软盘。 </para
><para arch="m68k"
>Amigas 或者 68k Macs 的软盘引导方法也不被支持。 </para
><para
>软盘映像是一些包含完整的 <emphasis
>原始</emphasis
> 格式软盘内容的文件。类似 <filename
>boot.img</filename
> 这样的软盘映像不能直接拷贝到软盘中。有一个特殊的程序可以将它们按 <emphasis
>原始</emphasis
> 模式写入软盘。这是一个必须的步骤，因为这些映像 文件是一些原始的磁盘保存方式。所以需要把文件的数据 <emphasis
>按扇区拷贝</emphasis
> 放到软盘中。 </para
><para
>根据平台的不同，有各种不同的方法来从软盘映像创建引导软盘。这一节将描述如何在不同平台上从软盘映像创建引导软盘。 </para
><para
>无论您使用何种方法来建立引导软盘，您应该在建立以后记住打开写保护的开关，以便确保内容不会在无意被抹掉。 </para>

  <sect2
><title
>从 Linux 或者 Unix 系统写软盘映像</title>
<para
>为了把软盘映像写入软盘，您可能需要系统的 root 访问权限。在软驱中放入一张优质的空白软盘，然后使用命令 <informalexample
><screen>
$ dd if=<replaceable
>filename</replaceable
> of=/dev/fd0 bs=1024 conv=sync ; sync
</screen
></informalexample
> 其中 <replaceable
>filename</replaceable
> 是一个软盘映像文件(请参阅 <xref linkend="downloading-files"/> 来获知应该使用哪个 <replaceable
>filename</replaceable
>)。<filename
>/dev/fd0</filename
> 是一个常见的软驱设备名。可能在您的工作站上面有所不同 <phrase arch="sparc"
>(在 Solaris 系统上是 <filename
>/dev/fd/0</filename
>)</phrase
>。这个命令也许在写软盘任务结束之前就会返回到命令符下。请观察软盘驱动器上面的磁盘使用灯，并且确保在您拔出软盘的时候灯已熄灭。在某些系统上，您可能需要运行一条命令来弹出软盘 <phrase arch="sparc"
>(在 Solaris 系统中使用 <command
>eject</command
> 命令，请参见其手册)</phrase
>。 </para
><para
>有些系统会在您放入软盘时自动尝试对其进行挂载。若要让工作站允许您对软盘进行 <emphasis
>原始模式</emphasis
> 写入操作，您可能必须关闭此功能。不幸的是，如何关闭此功能的方法 完全取决于具体的操作系统。<phrase arch="sparc"
> 在 Solaris 上，您可以利用卷管理来获得对软驱的原始访问权。首先，确信软盘已经被自动挂载(使用 <command
>volcheck</command
> 或者文件管理器中的类似命令)。然后安照上面给出的形式使用 <command
>dd</command
> 命令，只是把 <filename
>/dev/fd0</filename
> 替换成 <filename
>/vol/rdsk/<replaceable
>floppy_name</replaceable
></filename
>，这里 <replaceable
>floppy_name</replaceable
> 是软盘在格式化时所定的名字。(未命名的软盘默认使用 <filename
>unnamed_floppy</filename
>)。至于其他系统，请咨询您的系统管理员)。</phrase
> </para
><para arch="powerpc"
>如果想在 powerpc Linux 上写入一张软盘，您将必须弹出它。<command
>eject</command
> 命令能够很好地对此进行控制，当然您可能需要先安装它。 </para>

  </sect2>


<!-- Start of file install-methods/floppy/i386.xml -->


<!--  This is not set off for i386 only, because many people will have -->
<!--  access to a PC in order to make a floppy for other arches. -->

  <sect2
><title
>在 DOS、Windows、或者 OS/2 下写磁盘映像</title>

<para
>如果您能操作一台 i386 机器，您可以使用如下方法之一往软盘拷贝映像文件。 </para
><para
><command
>rawrite1</command
> 和 <command
>rawrite2</command
> 程序可在 MS-DOS 下使用。如果想使用这些程序，首先要确定您是从 DOS 启动。在 Windows 的 DOS 窗口或者在 文件浏览器中双击使用这些程序是 <emphasis
>不能</emphasis
> 运行的。 </para
><para
><command
>rwwrtwin</command
> 程序可以在 Windows 95、NT、98、2000、ME、XP 甚至可能最新的版本上运行。要使用它您需要解压 diskio.dll 至相同目录下。 </para
><para
>这些工具可以在官方 Debian 光盘中找到。他们位于 <filename
>/tools</filename
> 目录下。 </para>
  </sect2>
<!--   End of file install-methods/floppy/i386.xml -->

<!-- Start of file install-methods/floppy/m68k.xml -->


  <sect2 arch="m68k"
><title
>在 Atari 系统上写磁盘映像</title>
<para
>您可以在与软盘映像相同的目录下找到 &rawwrite.ttp;。双击程序图标，在 TOS 程序 命令行输入框内键入您想写入软盘的软盘映像文件名。 </para>

  </sect2>

  <sect2 arch="m68k"
><title
>在 Macintosh 系统上写磁盘映像</title>
<para
>没有一个 MacOS 应用程序可以用于将映像文件写到软盘(而且这也没有什么意义，因为您也不能在 Macintosh 系统上用软盘引导安装系统来安装内核以及模块)。但是，这些文件也被用来在后面的安装过程中安装操作系统和模块。 </para>

  </sect2>
<!--   End of file install-methods/floppy/m68k.xml -->

<!-- Start of file install-methods/floppy/powerpc.xml -->


  <sect2 arch="powerpc"
><title
>在 MacOS 上写磁盘映像</title>
<para
>这里有一个名为 <application
>Make Debian Floppy</application
> 的 AppleSrcipt 可以用来从所提供的磁盘映像制作软盘。它可以从 <ulink url="ftp://ftp2.sourceforge.net/pub/sourceforge/d/de/debian-imac/MakeDebianFloppy.sit"
></ulink
> 处下载。使用时只需要解压文件至桌面然后向其拖入您想刻录的映像文件。您必须已经安装了 Applescript 并在您的扩展管理器中开启它。Disk Copy 会要求您确认您的确想要清空磁盘并写入磁盘映像。 </para
><para
>您也可以直接使用 MacOS 工具 <command
>Disk Copy</command
> ，或者免费软件工具 <command
>suntar</command
>。<filename
>root.bin</filename
> 是一个软盘映像范例。您可以使用以下方法之一来利用这些工具将磁盘映像写入软盘。 </para>

   <sect3>
   <title
>写磁盘映像：使用<command
>Disk Copy</command
></title>
<para
>假如您是使用官方 &debian; 光盘上的软盘映像文件，那么 Type 和 Creator 已经设置正确。以下 <command
>Creator-Changer</command
> 步骤只针对从 Debian 镜像下载映像文件的情况。 </para>
<orderedlist>
<listitem
><para
>取得 <ulink url="&url-powerpc-creator-changer;"
>Creator-Changer</ulink
> 并且用它打开 <filename
>root.bin</filename
> 文件。 </para
></listitem>
<listitem
><para
>将 Creator 改为 <userinput
>ddsk</userinput
> (Disk Copy)，并将 Type 改为 <userinput
>DDim</userinput
> (binary floppy image)。注意此处大小写敏感。 </para
></listitem>
<listitem
><para
><emphasis
>注意：</emphasis
> 在 Finder 中，使用 <userinput
>Get Info</userinput
> 来显示关于软盘映像的 Finder 信息，并在 <userinput
>File Locked</userinput
> 复选框中划上<quote
>X</quote
>。这样在映像意外的被挂载时 MacOS 将不会删除引导区。 </para
></listitem>
    <listitem
><para
>获取 <command
>Disk Copy</command
>。如果您已经拥有了 MacOS 系统或光盘，它多半就已经被包含在其中，否则可以试试 <ulink url="&url-powerpc-diskcopy;"
></ulink
>。 </para
></listitem>
<listitem
><para
>运行 <command
>Disk Copy</command
>，并且从 <userinput
>Utilities</userinput
> 菜单中选择 <guimenuitem
>Make a Floppy</guimenuitem
>，然后从对话框中选择 <emphasis
>locked</emphasis
> 的映像文件。它会要求您插入一张软盘，然后询问是否删除它。完成后它应该会弹出软盘。 </para
></listitem>
</orderedlist>

   </sect3>

   <sect3>
   <title
>写磁盘映像：使用<command
>suntar</command
></title>
<para>

<orderedlist>
<listitem
><para
>获取 <command
>suntar</command
>，它在 <ulink url="&url-powerpc-suntar;"
> </ulink
> 中。运行 <command
>suntar</command
> 程序并且从 <userinput
>Special</userinput
> 菜单中选择<quote
>Overwrite Sectors...</quote
>。 </para
></listitem>
<listitem
><para
>按照要求插入软盘，然后点击 &enterkey; (从0扇区开始)。 </para
></listitem>
<listitem
><para
>在打开文件对话框中选择 <filename
>root.bin</filename
> 文件。 </para
></listitem>
<listitem
><para
>当软盘被成功写入之后，选中 <menuchoice
> <guimenu
>File</guimenu
> <guimenuitem
>Eject</guimenuitem
> </menuchoice
>。如果写盘期间发生任何错误，请换别的软盘试试。 </para
></listitem>
</orderedlist>
在使用您创建的软盘之前，<emphasis
>请设置写保护标签</emphasis
>！否则，如果您偶然在 MacOS 中挂载了它，MacOS 将会将其毁坏。 </para>
   </sect3>
  </sect2>
<!--   End of file install-methods/floppy/powerpc.xml -->

 </sect1>

<!--   End of file install-methods/create-floppy.xml -->

<!-- Start of file install-methods/boot-usb-files.xml -->

 <sect1 condition="bootable-usb" id="boot-usb-files">
 <title
>为从 USB 闪盘引导准备文件</title>

<para
>您需要一台运行支持 USB 的 GNU/Linux 系统来为 USB 闪盘引导准备文件。您应该确定 usb-storage 内核模块已经被加载(<userinput
>modprobe usb-storage</userinput
>) 然后尝试找出 USB 闪盘被映射到的哪个 SCSI 设备(在此以 <filename
>/dev/sda</filename
> 为例)。为了写入您的闪盘，您可能需要关闭它的写保护开关。 </para
><para
>注意，准备的 USB 闪盘应该至少有 128MB 的容量(在更小的尺寸安装也是可能的，请参考 <xref linkend="usb-copy-flexible"/>)。 </para>

  <sect2 id="usb-copy-easy">
  <title
>复制文件 &mdash; 轻松的途径</title>
<para arch="i386"
>这里有一个合集文件 <filename
>hd-media/boot.img.gz</filename
>，其中包含了所有的安装程序文件(包括内核)，以及 <command
>SYSLINUX</command
> 和它的配置文件。您只需要把它直接解压到您的 USB 闪盘内即可： <informalexample
><screen
># zcat boot.img.gz &gt; /dev/<replaceable
>sda</replaceable
>
</screen
></informalexample>

</para
><para arch="powerpc"
>这里有一个合集文件 <filename
>hd-media/boot.img.gz</filename
>，其中包含了所有的安装程序文件(包括内核)，以及 <command
>yaboot</command
> 和它的配置文件。您可以使用 <command
>mac-fdisk</command
> 的 <userinput
>C</userinput
> 命令在您的 USB 闪盘上创建一个类型为 "Apple_Bootstrap" 的分区，然后直接解开映像文件到： <informalexample
><screen
># zcat boot.img.gz &gt; /dev/<replaceable
>sda2</replaceable
>
</screen
></informalexample>

</para>
<warning
><para
>采用这种方法将销毁设备上的任何内容。请确保您使用了 USB 闪盘的正确设备名。 </para
></warning>
<para
>然后，挂载 USB 闪盘(<userinput
>mount <replaceable arch="i386"
>/dev/sda</replaceable
> <replaceable arch="powerpc"
>/dev/sda2</replaceable
> /mnt</userinput
>)，它上面应该已经具有 <phrase arch="i386"
>一个 FAT 文件系统</phrase
> <phrase arch="powerpc"
>一个 HFS 文件系统</phrase
> ，您再将一个 Debian netinst(网络安装) 或 businesscard(名片) ISO 映像拷贝到盘上。请注意文件名必须以 <filename
>.iso</filename
> 结尾。卸载闪盘(<userinput
>umount /mnt</userinput
>)后结束。 </para>
  </sect2>

  <sect2 id="usb-copy-flexible">
  <title
>复制文件 &mdash; 灵活的方法</title>
<para
>如果您需要更多的灵活性或者只是想了解其间发生了什么，您应该使用如下的方法来把文件放到您的闪盘。 </para>


<!-- Start of file install-methods/usb-setup/i386.xml -->

   <sect3 arch="i386">
   <title
>在 &arch-title; 上为 USB 闪盘分区</title>
<para
>我们将展示如何使用闪盘的第一个分区，而不是整个设备。 </para
><note
><para
>由于大多数 USB 闪盘预先设置了一个单独的 FAT16 分区，您可能不需要重新分区或者格式化 USB 闪盘。如果您必须这么做，请使用 <command
>cfdisk</command
> 或者其他的分区工具来创建一个 FAT16 分区并且输入: <informalexample
><screen>
# mkdosfs /dev/<replaceable
>sda1</replaceable>
</screen
></informalexample
> 注意使用正确的 USB 盘设备名称。<command
>mkdosfs</command
> 命令包含在 <classname
>dosfstools</classname
> Debian 包中。 </para
></note
><para
>为了能在 USB 闪盘引导后启动内核，我们要在 USB 闪盘上放入一个启动引导程序。尽管任何引导装载程序(比如 <command
>LILO</command
>)都应该可以胜任这个工作，不过还是使用 <command
>SYSLINUX</command
> 更方便。主要原因是是它可以使用 FAT16 分区，而且只需要编辑一个文本文件就能对其进行配置。任何支持 FAT 文件系统的操作系统可以用来改变启动引导器的配置文件。 </para
><para
>为了把 <command
>SYSLINUX</command
> 放到您的 USB 闪盘的 FAT16 分区上，请在您的系统中安装 <classname
>syslinux</classname
> 和 <classname
>mtools</classname
> 包，然后执行： <informalexample
><screen>
# syslinux /dev/<replaceable
>sda1</replaceable>
</screen
></informalexample
> 再提醒一次，请确认您使用的是正确的设备名称。还有，一定不能在启动 <command
>SYSLINUX</command
> 的时候挂载该分区，因为在操作过程中会向分区的引导扇区写入数据并且创建包含启动引导器代码的 <filename
>ldlinux.sys</filename
> 文件。 </para
><para
>接下来就是挂载分区(<userinput
>mount /dev/sda1 /mnt</userinput
>)以及将下列文件从 Debain 文件库拷贝到闪盘上： <itemizedlist
> <listitem
><para
> <filename
>vmlinuz</filename
> (内核二进制文件) </para
></listitem
> <listitem
><para
> <filename
>initrd.gz</filename
> (初始化内存映像) </para
></listitem
> <listitem
><para
> <filename
>syslinux.cfg</filename
> (SYSLINUX 配置文件) </para
></listitem
> <listitem
><para
> 可选的内核模块 </para
></listitem
> </itemizedlist
> 如果您想给这些文件改名，请注意 <command
>SYSLINUX</command
> 只能处理 DOS (8.3) 格式的文件名。 </para
><para
><filename
>syslinux.cfg</filename
> 配置文件应该含有下列两行： <informalexample
><screen>
default vmlinuz
append initrd=initrd.gz ramdisk_size=12000 root=/dev/ram rw
</screen
></informalexample
> 请注意，根据所启动的内存映像的大小，在必要的时候，您可能需要增大<userinput
>ramdisk_size</userinput
> 参数的数值。<phrase condition="sarge"
>如果引导失败，您可以尝试添加 <userinput
>devfs=mount,dall</userinput
> 到 <quote
>append</quote
> 那一行。</phrase
> </para>
   </sect3>
<!--   End of file install-methods/usb-setup/i386.xml -->

<!-- Start of file install-methods/usb-setup/powerpc.xml -->

   <sect3 arch="powerpc">
   <title
>在 &arch-title; 上为 USB 闪盘分区</title>
<para
>绝大多数 USB 盘的预设置都不能让 Open Firmware 从该盘进行引导，因此您需要为闪盘重新分区。在 Mac 系统上，执行 <userinput
>mac-fdisk /dev/sda</userinput
>，用 <userinput
>i</userinput
> 命令初始化新的分区映射，然后使用 <userinput
>C</userinput
> 命令创建一个新的类型为 Apple_Bootstrap 的分区。(要注意的是第一个分区总是分区映射本身。)然后键入 <informalexample
><screen>
$ hformat /dev/<replaceable
>sda2</replaceable>
</screen
></informalexample
> 注意使用正确的 USB 盘设备名称。<command
>hformat</command
> 命令包含在 <classname
>hfsutils</classname
> Debian 包中。 </para
><para
>为了能在 USB 闪盘引导后启动内核，我们要在 USB 闪盘上放入一个启动引导程序。<command
>yaboot</command
> 启动引导器可以被安装到 HFS 文件系统上，而且只需要编辑一个文本文件就能对其重新进行配置。任何支持 HFS 文件系统的操作系统可以用来改变启动引导器的配置文件。 </para
><para
>常用的 <command
>ybin</command
> 工具(随 <command
>yaboot</command
> 附带)并不能识别 USB 存储设备，因此您不得不手动安装 <command
>yaboot</command
>，这可以通过 <classname
>hfsutils</classname
> 工具来完成。用法如下： <informalexample
><screen>
$ hmount /dev/sda2
$ hcopy -r /usr/lib/yaboot/yaboot :
$ hattrib -c UNIX -t tbxi :yaboot
$ hattrib -b :
$ humount
</screen
></informalexample
> 再提醒一次，请确认您使用的是正确的设备名称。操作过程中一定不能挂载此分区。程序会向分区中写入启动引导器，并使用 HFS 工具向其添加标记，最终使得 Open Fireware 可以启动它。完成以上操作之后，USB 盘的其他部分就可以用普通的 Unix 工具来处理了。 </para
><para
>接下来就是挂接分区(<userinput
>mount /dev/sda2 /mnt</userinput
>)以及将下列文件从 Debain 文件库拷贝到闪盘上： <itemizedlist>
<listitem
><para
><filename
>vmlinux</filename
> (内核二进制文件) </para
></listitem>
<listitem
><para
><filename
>initrd.gz</filename
> (初始化内存映像) </para
></listitem>
<listitem
><para
><filename
>yaboot.conf</filename
> (yaboot 配置文件) </para
></listitem>
<listitem
><para
><filename
>boot.msg</filename
> (可选的启动信息) </para
></listitem>
<listitem
><para
>可选的内核模块 </para
></listitem>
</itemizedlist>

</para
><para
><filename
>yaboot.conf</filename
> 配置文件应该含有以下几行： <informalexample
><screen>
default=install
root=/dev/ram

message=/boot.msg

image=/vmlinux
        label=install
        initrd=/initrd.gz
        initrd-size=10000<phrase condition="sarge">
        append="devfs=mount,dall --"</phrase>
        read-only
</screen
></informalexample
> 请注意，在必要的时候，您可能需要增大<userinput
>initrd-size</userinput
> 参数的数值，这完全取决于您所使用的内存映像的大小。 </para>
   </sect3>
<!--   End of file install-methods/usb-setup/powerpc.xml -->

   <sect3>
   <title
>添加 ISO 映像</title>
<para
>现在您需要把任意一个 Debian ISO 映像(businesscard、netinst 或者甚至是完全版)放入您的 USB 闪盘内(如果它装得下的话)。这样的一个映像文件的后缀名必须是 <filename
>.iso</filename
>。 </para
><para
>如果您想直接通过网络安装而不使用 ISO 映像，当然就可以跳过上述步骤。并且您必须要使用 <filename
>netboot</filename
> 目录中的初始化内存映像来取代来自 <filename
>hd-media</filename
> 的相同文件。这是因为 <filename
>hd-media/initrd.gz</filename
> 并不包含网络支持。 </para
><para
>当您完成后，卸载 USB 闪盘(<userinput
>umount /mnt</userinput
>)并打开写保护。 </para>
   </sect3>

   <!-- TODO: doesn't this section belong later? -->
   <sect3 arch="i386">
   <title
>从 USB 闪盘启动</title>
<warning
><para
>如果您的系统拒绝从 USB 闪盘引导，那么可能是因为它含有无效的主引导扇区记录(MBR)。您可以使用 <command
>install-mbr</command
> 命令来修复这个问题，该命令来自 <classname
>mbr</classname
> 软件包： <informalexample
><screen
># install-mbr /dev/<replaceable
>sda</replaceable
>
</screen
></informalexample>

</para
></warning>
   </sect3>
  </sect2>
 </sect1>
<!--   End of file install-methods/boot-usb-files.xml -->

<!-- Start of file install-methods/boot-drive-files.xml -->

 <sect1 condition="bootable-disk" id="boot-drive-files">
 <title
>为从硬盘引导准备文件</title>
<para
>安装程序可以从硬盘分区上面用引导文件引导。它们可以在其它操作系统下面启动，或者直接使用 BIOS 提供的引导装载程序直接启动。 </para
><para
>采用这个技术可以实现完全的<quote
>纯网络</quote
>的安装方式。这样可以避免一些使用可移动介质带来的的缺点，比如寻找和刻录光盘映像或是与大量且不可靠的软盘纠缠不清。 </para
><para arch="i386"
>安装程序无法从 NTFS 文件系统上进行引导。 </para
><para arch="powerpc"
>安装程序无法从 HFS+ 文件系统进行引导。MacOS System 8.1 及之后的系统可能使用 HFS+ 文件系统，NewWorld PowerMacs 则全部使用 HFS+。要确认您的系统是否是 HFS+，请选择 <userinput
>Get Info</userinput
> 来查看相关卷信息。HFS 文件系统文件系统显示为 <userinput
>Mac OS Standard</userinput
>，而 HFS+ 文件系统将显示为 <userinput
>Mac OS Extended</userinput
>。您必须使用一个 HFS 分区来在 MacOS 和 Linux 之间交换文件，特别是那些您下载的安装文件。 </para
><para arch="powerpc"
>根据您的系统是<quote
>NewWorld</quote
>还是<quote
>OldWorld</quote
>型号，硬盘安装程序的引导将使用不同的安装文件。 </para>

  <sect2 arch="i386" id="files-lilo">
  <title
>硬盘安装程序引导使用 <command
>LILO</command
> 或 <command
>GRUB</command
></title>
<para
>这一节将解释如何增加或者甚至替换现有的 linux 安装，通过 <command
>LILO</command
> 或 <command
>GRUB</command
>。 </para
><para
>在启动时，两种引导器都支持将内核和磁盘映像加载到内存中。这个内存虚拟磁盘可以被用做内核的根文件系统。 </para
><para
>将以下文件从 Debian 存档中拷贝到硬盘中比较方便的地方，比如 <filename
>/boot/newinstall/</filename
>。 <itemizedlist>
<listitem
><para
><filename
>vmlinuz</filename
>(内核二进制文件) </para
></listitem>
<listitem
><para
><filename
>initrd.gz</filename
> (内存虚拟磁盘映像) </para
></listitem>
</itemizedlist>

</para
><para
>最后，要配置启动引导器，请进入 <xref linkend="boot-initrd"/>。 </para>
  </sect2>


  <sect2 arch="powerpc" id="files-oldworld">
  <title
>在 OldWorld Macs 上引导硬盘安装程序</title>
<para
><filename
>boot-floppy-hfs</filename
> 软盘使用 <application
>miBoot</application
> 来启动 Linux 安装，但是 <application
>miBoot</application
> 不易用于从硬盘引导。运行于 MacOS 的 <application
>BootX</application
> 支持从硬盘上的文件进行引导。<application
>BootX</application
> 也能在安装完 Debian 后用于 MacOS 和 Linux 的双重引导。对于 Performa 6360 来说，<command
>quik</command
> 看上去不能让硬盘可引导。因此 <application
>BootX</application
> 对于该型号来说是必须的。 </para
><para
>请下载并且解压 <application
>BootX</application
> 发布版本。它可以从 <ulink url="&url-powerpc-bootx;"
></ulink
>，或者 Debian http/ftp 镜像以及官方 Debian 光盘的 <filename
>dists/woody/main/disks-powerpc/current/powermac</filename
> 目录下得到。可以用 <application
>Stuffit Expander</application
> 来把它从打包档案中解开。在这个包中，有一个名为 <filename
>Linux Kernels</filename
> 的空文件夹。请下载 <filename
>linux.bin</filename
> 和 <filename
>ramdisk.image.gz</filename
> (位于 <filename
>disks-powerpc/current/powermac</filename
> 文件夹)，然后把他们放到 <filename
>Linux Kernels</filename
> 文件夹中，然后把 <filename
>Linux Kernels</filename
> 文件夹放到活动的系统文件夹中。 </para>
  </sect2>

  <sect2 arch="powerpc" id="files-newworld">
  <title
>在 NewWorld Macs 上启动硬盘安装程序</title>
<para
>NewWorld PowerMacs 支持从网络或者 ISO9660 格式光盘进行引导，或者直接从硬盘上载入 ELF 二进制文件。这类机器可以直接使用 <command
>yaboot</command
>引导。它既支持直接从 ext2 分区中装入内核和内存虚拟磁盘，也支持和 MacOS 的双重引导。硬盘引导特别适合最新的没有软驱的机器。<command
>BootX</command
> 则不被支持，也一定不能用在 NewWorld PowerMacs 上。 </para
><para
><emphasis
>拷贝</emphasis
>(而非移动)您早先从 Debian 存档下载的下列四个文件到您硬盘的根目录上(这个可以用按住 <keycap
>option</keycap
> 键然后拖动每个文件到硬盘图标的方法来完成)。 <itemizedlist>
<listitem
><para>

<filename
>vmlinux</filename>

</para
></listitem>
<listitem
><para>

<filename
>initrd.gz</filename>

</para
></listitem>
<listitem
><para>

<filename
>yaboot</filename>

</para
></listitem>
<listitem
><para>

<filename
>yaboot.conf</filename>

</para
></listitem>
</itemizedlist>

</para
><para
>记下您存放这些文件的 MacOS 分区号。如果您有 MacOS 的 <command
>pdisk</command
> 程序，您可以使用 L 命令检查分区号。当引导安装程序的时候，您需要这个分区号码用于在 Open Firmware 提示符下面输入命令。 </para
><para
>要引导安装程序，请进入 <xref linkend="boot-newworld"/>。 </para>
  </sect2>
 </sect1>
<!--   End of file install-methods/boot-drive-files.xml -->

<!-- Start of file install-methods/install-tftp.xml -->

 <sect1 condition="supports-tftp" id="install-tftp">
 <title
>为使用 TFTP 网络引导准备文件</title>
<para
>如果您的机器连接到了一个局域网，您可以从网络上的另外一台机器上面通过 TFTP 来引导它。如果您倾向从另外一台机器上面引导安装系统，则引导文件需要放在那台机器上面的某个特殊地方，并且配置好能够能够支持对您的机器进行引导。 </para
><para
>您需要设置一台 TFTP 服务器，并且对于很多机器来说，还需要一台 BOOTP 服务器 <phrase condition="supports-rarp"
>，或 RARP 服务器</phrase
> <phrase condition="supports-dhcp"
>，又或 DHCP 服务器</phrase
>。 </para
><para
><phrase condition="supports-rarp"
>反向地址解析协议( The Reverse Address Resolution Protocol (RARP)) 是一种告诉您的客户它自己 IP 地址的方法。另外一种方法是采用 BOOTP 协议。</phrase
> <phrase condition="supports-bootp"
>BOOTP 是一种 IP 协议，用来告诉一台计算机它自己 IP 地址以及从网络何处获得启动映像。</phrase
> <phrase arch="m68k"
>在 VMEbus 系统上面的另外一种选择是：IP 地址可以能够在引导 ROM 中手工配置。</phrase
> <phrase condition="supports-dhcp"
>DHCP (动态主机配置协议 Dynamic Host Configuration Protocol) 是一个更灵活，向后兼容的 BOOTP 拓展。有一些系统只能通过 DHCP 来配置。</phrase
> </para
><para arch="powerpc"
>对于 PowerPC 来说，如果您有一台 NewWorld Power Macintosh 机器，使用 DHCP 来代替 BOOTP 比较好。有些最新的机器不能从 BOOTP 引导。 </para
><para arch="alpha"
>不像 Sparc 和 PowerPC 机器上的 Open Firmware, SRM 控制台将 <emphasis
>不</emphasis
> 使用 RARP 来获得它的 IP 地址。因此您必须使用 BOOTP 来从网络启动您的 Alpha 机器<footnote
> <para
> Alpha 系统也可以通过 DECNet MOP (Maintenance Operations Protocol) 从网络启动，但在此不作阐述。在您急切需要使用 MOP 来启动 Alpha 系统上的 Linux 时，估计 OpenVMS 操作员很乐意帮您完成。 </para
> </footnote
>。您也可以直接在 SRM 控制台中直接输入网络接口的 IP 配置。 </para
><para arch="hppa"
>一些较早的 HPPA 机器(比如 715/75)使用 RBOOTD 而不是 BOOTP。Debian 里面有一个 <classname
>rbootd</classname
> 软件包。 </para
><para
>普通文件传输协议(Trivial File Transfer Protocol (TFTP))被用于为客户提供引导映像。理论上，任意服务器，在任意平台上只要实现了这些协议就都能够被应用。在这一节的一些例子里面，我们将提供在 SunOS 4.x、SunOS 5.x (即 Solaris) 和 GNU/Linux 上面的一些操作例子。 <note arch="i386"
><para
>如果想用 TFTP 的 Pre-boot Execution Environment (PXE) 方式启动，您将需要一台支持 <userinput
>tsize</userinput
> 的 TFTP 服务器。在 &debian; 服务器上，<classname
>atftpd</classname
> 和 <classname
>tftpd-hpa</classname
> 包符合此要求，我们推荐 <classname
>tftpd-hpa</classname
>。 </para
></note>

</para>


<!-- Start of file install-methods/tftp/rarp.xml -->


  <sect2 condition="supports-rarp" id="tftp-rarp">
   <title
>设置 RARP 服务器</title>
<para
>为了设置 RARP ,您需要知道需要安装系统的客户机的以太网卡地址(网卡 MAC 地址)。如果您还不知道这个信息，可以<phrase arch="sparc"
>从 OpenPROM 的初始化引导信息中获得，请使用 OpenBoot <userinput
>.enet-addr</userinput
> 命令，或者</phrase
> 启动进入<quote
>Rescue</quote
>模式(例如使用回复软盘)并且使用 <userinput
>/sbin/ifconfig eth0</userinput
> 命令。 </para
><para
>在使用 Linux 2.2.x 内核的 RARP 服务器系统上，您需要通以下的命令来植入内核 RARP 表： <informalexample
><screen>
# <userinput
>/sbin/rarp -s 
<replaceable
>client-hostname</replaceable>
<replaceable
>client-enet-addr</replaceable
></userinput>

# <userinput
>/usr/sbin/arp -s 
<replaceable
>client-ip</replaceable>
<replaceable
>client-enet-addr</replaceable
></userinput>
</screen
></informalexample
> 如果看到 <informalexample
><screen>
SIOCSRARP: Invalid argument
</screen
></informalexample
> 您可能需要加载 RARP 内核模块或重新编译内核并使之支持 RARP。试试在运行 <userinput
>modprobe rarp</userinput
> 命令后再尝试一遍 <command
>rarp</command
> 命令。 </para
><para
>使用 Linux 2.4.x 内核的 RARP 服务器系统上并没有 RARP 模块，您应该使用 <command
>rarpd</command
> 程序替代。操作过程很类似下面将提到的在 SunOS 上的用法。 </para
><para
>在 SunOS 里, 您需要确定客户机的以太网硬件地址已经列在<quote
>ethers</quote
>数据库(在 <filename
>/etc/ethers</filename
> 文件中或者通过 NIS/NIS+)和<quote
>hosts</quote
>数据库中，然后您需要启动 RARP 守护程序，在 SunOS 4 里，使用(以 root 身份)： <userinput
>/usr/etc/rarpd -a</userinput
> 命令；在 SunOS 5 里，则使用 <userinput
>/usr/sbin/rarpd -a</userinput
> 命令。 </para>
  </sect2>
<!--   End of file install-methods/tftp/rarp.xml -->

<!-- Start of file install-methods/tftp/bootp.xml -->


  <sect2 condition="supports-bootp" id="tftp-bootp">
  <title
>设置 BOOTP 服务器</title>
<para
>在 GNU/Linux 下面有两种 BOOTP 服务器。他们是 CMU <command
>bootpd</command
>和另外一种实际上是 DHCP 服务器的程序 ISC <command
>dhcpd</command
>，他们被包含在 &debian; 的 <classname
>bootp</classname
> 和 <classname
>dhcp</classname
> 软件包中。 </para
><para
>为了使用 CMU <command
>bootpd</command
>，您必须首先将 <filename
>/etc/inetd.conf</filename
> 中相关的注释标记去掉(或者加入一些新行)。在 &debian; 里，您可以运行 <userinput
>update-inetd --enable bootps</userinput
>，然后执行 <userinput
>/etc/init.d/inetd reload</userinput
> 来实现此任务。在其它系统中，这个行应该看起来像这样： <informalexample
><screen>
bootps  dgram  udp  wait  root  /usr/sbin/bootpd  bootpd -i -t 120
</screen
></informalexample
> 现在，您必须创建一个 <filename
>/etc/bootptab</filename
> 文件。它具有和一些老 BSD 文件很相似并使用相同的加密格式。这些文件包括 <filename
>printcap</filename
>、<filename
>termcap</filename
>，和 <filename
>disktab</filename
>。参见 <filename
>bootptab</filename
> 的手册页以获得更多的信息。对于 CMU <command
>bootpd</command
>，您将需要知道客户机硬件的(MAC)地址。这里有一个示例 <filename
>/etc/bootptab</filename
>： <informalexample
><screen>
client:\\
  hd=/tftpboot:\\
  bf=tftpboot.img:\\
  ip=192.168.1.90:\\
  sm=255.255.255.0:\\
  sa=192.168.1.1:\\
  ha=0123456789AB:
</screen
></informalexample
> 您至少需要修改<quote
>ha</quote
>选项，它指定了客户机的硬件地址。<quote
>bf</quote
>选项则指定了一个客户机应该通过 TFTP 取得的文件名称。请从 <xref linkend="tftp-images"/> 处获得更多的信息。<phrase arch="mips"
> 在 SGI Indys 上，您可以仅仅只是进入命令监视器然后输入 <userinput
>printenv</userinput
>。<userinput
>eaddr</userinput
> 的值就是机器的 MAC 地址。</phrase
> </para
><para
>相反，通过 ISC <command
>dhcpd</command
> 设置 BOOTP 就非常容易。因为它把 BOOTP 客户程序看成一个特殊的 DHCP 客户端。部分体系结构需要经过复杂的设置才能从 BOOTP 启动客户端。如果您的机器属于这种情况，请阅读<xref linkend="dhcpd"/>。否则，您大概只需要将 <userinput
>allow bootp</userinput
> 指令添加到包含客户机的子网的配置部分，并重新启动 <command
>dhcpd</command
> 就可以了，重启的命令是：<userinput
>/etc/init.d/dhcpd restart</userinput
>。 </para>
  </sect2>
<!--   End of file install-methods/tftp/bootp.xml -->

<!-- Start of file install-methods//tftp/dhcp.xml -->

  <sect2 condition="supports-dhcp" id="dhcpd">
   <title
>设置 DHCP 服务器</title>
<para
>ISC <command
>dhcpd</command
> 是一种自由软件 DHCP 服务器。在 &debian; 里，它被包含在 <classname
>dhcp</classname
> 软件包中。这里有它的一个配置文件的范例(通常是 <filename
>/etc/dhcpd.conf</filename
>)： <informalexample
><screen>
option domain-name "example.com";
option domain-name-servers ns1.example.com;
option subnet-mask 255.255.255.0;
default-lease-time 600;
max-lease-time 7200;
server-name "servername";

subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.200 192.168.1.253;
  option routers 192.168.1.1;
}

host clientname {
  filename "/tftpboot/tftpboot.img";
  server-name "servername";
  next-server servername;
  hardware ethernet 01:23:45:67:89:AB; 
  fixed-address 192.168.1.90;
}
</screen
></informalexample
> 注意：新的(并且是推荐的) <classname
>dhcp3</classname
> 软件包使用 <filename
>/etc/dhcp3/dhcpd.conf</filename
>作为其配置文件。 </para
><para
>在这个例子中，一台服务器 <replaceable
>servername</replaceable
> 负责执行包括 DHCP 服务器、TFTP 服务器和网关在内的所有工作。您需要修改域名选项，以及服务器名和客户端硬件地址。<replaceable
>filename</replaceable
> 选项应该是将要从 TFTP 获取的文件名。 </para
><para
>在编辑了 <command
>dhcpd</command
> 配置文件后，您需要使用下面的命令重新启动它：<userinput
>/etc/init.d/dhcpd restart</userinput
>作为其配置文件。 </para>

   <sect3 arch="i386">
   <title
>在 DHCP 配置中打开 PXE 引导功能</title>
<para
>这里是另外一个采用 TFTP 的 Pre-boot Execution Environment (PXE) 方法的 <filename
>dhcp.conf</filename
> 配置例子。
<informalexample
><screen>
option domain-name "example.com";

default-lease-time 600;
max-lease-time 7200;

allow booting;
allow bootp;

# The next paragraph needs to be modified to fit your case
subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.200 192.168.1.253;
  option subnet-mask 255.255.255.0;
  option broadcast-address 192.168.1.255;
# the gateway address which can be different 
# (access to the internet for instance)
  option routers 192.168.1.1;
# indicate the dns you want to use
  option domain-name-servers 192.168.1.3;
}

group {
 next-server 192.168.1.3;
 host tftpclient {
# tftp client hardware address
  hardware ethernet  00:10:DC:27:6C:15;
  filename "/tftpboot/pxelinux.0";
 }
}
</screen
></informalexample
> 注意对于 PXE 引导来说，客户端文件名 <filename
>pxelinux.0</filename
> 是一个启动引导器，而非一个内核映象(参见下面的<xref linkend="tftp-images"/> )。 </para>
   </sect3>
  </sect2>
<!--   End of file install-methods//tftp/dhcp.xml -->

  <sect2 id="tftpd">
  <title
>开启 TFTP 服务器</title>
<para
>要准备好 TFTP 服务器，您首先需要确定 <command
>tftpd</command
> 已经启动。这通常可以在 <filename
>/etc/inetd.conf</filename
>添加如下字句来实现： <informalexample
><screen>
tftp dgram udp wait nobody /usr/sbin/tcpd in.tftpd /tftpboot
</screen
></informalexample
> Debian 包通常在安装后会自动把这条设置好。 </para
><para
>检查那个文件并且记住被用作 <command
>in.tftpd</command
> 的参数的目录，您接下来将会需要它。<userinput
>-l</userinput
> 参数能够让某些版本的 <command
>in.tftpd</command
> 将所有的请求记录到系统日志中。这将在检查错误的时候会很有用。如果您必须修改 <filename
>/etc/inetd.conf</filename
>，您将必须提醒正在运行的 <command
>inetd</command
>进程该文件已经被改变。在 Debian 系统中，您应该执行 <userinput
>/etc/init.d/inetd reload</userinput
>；而在其它系统中，找到 <command
>inetd</command
> 所对应的进程 ID，并且运行 <userinput
>kill -HUP <replaceable
>inetd-pid</replaceable
></userinput
>。 </para
><para arch="mips"
>如果您想要在一台 SGI 上安装 Debian 并且您的 TFTP 服务器是一台运行 Linux 2.4 的 GNU/Linux，您需要对服务器进行如下设置： <informalexample
><screen>
# echo 1 &gt; /proc/sys/net/ipv4/ip_no_pmtu_disc
</screen
></informalexample
> 来关闭 Path MTU 查询，否则 Indy 的 PROM 不能下载内核。而且，您还要确保 TFTP 数据包是从一个小于 32767 的端口送出，否则在第一包之后，下载将停止。重申一下，这是由于 Linux 2.4.X 触发了 PROM 里的一个 bug。您可以通过如下设置： <informalexample
><screen>
# echo "2048 32767" &gt; /proc/sys/net/ipv4/ip_local_port_range
</screen
></informalexample
> 调整 Linux TFTP 服务器使用的源端口范围以避开这个错误。 </para>
  </sect2>

  <sect2 id="tftp-images">
  <title
>将 TFTP 映像放到适当的位置</title>
<para
>接下来，将在 <xref linkend="where-files"/>中找到的 TFTP 启动映像放置到<command
>tftpd</command
>引导映像目录中。一般来说，这个目录将是 <filename
>/tftpboot</filename
>。您必须将该文件链接到 <command
>tftpd</command
> 所使用的引导特定客户端的文件名。不幸的是，这个文件名完全决定于 TFTP 客户程序，并且没有一个强制的标准。 </para
><para arch="powerpc"
>在 NewWorld Power Macintosh 上，您需要设置 <command
>yaboot</command
>引导装载器作为 TFTP 引导映像。<command
>Yaboot</command
> 接下来将通过 TFTP 来获到内核和内存虚拟磁盘映像。对于网络引导，请使用 <filename
>yaboot-netboot.conf</filename
>。只需要将其改名为 <filename
>yaboot.conf</filename
> 并且放入 TFTP 目录。 </para
><para arch="i386"
>对于用 PXE 引导来说，您所需的只是设置 <filename
>netboot/netboot.tar.gz</filename
> 压缩包。简单地将此包解压到 <command
>tftpd</command
> 引导映像目录下。并确保您的 DHCP 服务器的配置将会把 <filename
>/pxelinux.0</filename
> 以启动所需的文件名传递至<command
>tftpd</command
>。 </para
><para arch="ia64"
>对于用 PXE 引导来说，您所需的只是设置 <filename
>netboot/netboot.tar.gz</filename
> 压缩包。简单地将此包解压到 <command
>tftpd</command
> 引导映像目录下。并确保您的 DHCP 服务器配置将会把 <filename
>/debian-installer/ia64/elilo.efi</filename
> 以启动所需的文件名传递至<command
>tftpd</command
>。 </para>

   <sect3 arch="mipsel">
   <title
>DECstation TFTP 映像文件</title>
<para
>对于 DECstation 来说，对于每个子体系都有相应的 tftpimage 映像文件。这些单一文件包含了内核和安装程序。命名规则是 <replaceable
>subarchitecture</replaceable
>/netboot-boot.img。如果您是按照上述 BOOTP/DHCP 设置范例进行操作，请将想要使用的 tftpimage 文件拷贝至 <userinput
>/tftpboot/tftpboot.img</userinput
>。 </para
><para
>DECstation 通过 <userinput
>boot <replaceable
>#</replaceable
>/tftp</userinput
> 命令来使用 TFTP 进行固件引导。这里 <replaceable
>#</replaceable
> 是用于引导的 TurboChannel 设备号。在大多数 DECstations 上，这个数字是<quote
>3</quote
>。如果 BOOTP/DHCP 服务器不提供文件名或者您需要传递附加的参数，他们可以按照如下语法加入： </para
><para>

<userinput
>boot #/tftp/filename param1=value1 param2=value2 ...</userinput>

</para
><para
>一些 DECstation 固件版本在网络引导中有一个问题：传输可以开始，但是过一段时间它就会停止并且产生一个 <computeroutput
>a.out err</computeroutput
>。这可能是由以下几个原因所造成的： <orderedlist
> <listitem
><para
> 固件在一个 TFTP 传输中没有回应 ARP 请求，这导致一个 ARP 超时并且停止传输。解决方案是 将以太网卡的 MAC 地址静态加入到 TFTP 服务器的 ARP 表中。想要作到这点可以在 TFTP 服务器 上用 root 身份运行 <userinput
>arp -s <replaceable
>IP-address</replaceable
> <replaceable
>MAC-address</replaceable
></userinput
>。DECstation 的 MAC 地址能够通过在 DECstation 固件提示符下输入 <command
>cnfg</command
> 来获得。</para
></listitem
> <listitem
><para
> 固件对于这些更够通过 TFTP 引导的文件有一个尺寸限制。</para
></listitem
> </orderedlist
> 有些固件版本根本不能通过 TFTP 引导。您可以在 NetBSD 网页上找到关于不同固件版本的综述： <ulink url="http://www.netbsd.org/Ports/pmax/board-list.html#proms"
></ulink
>。 </para>
   </sect3>

   <sect3 arch="alpha">
   <title
>Alpha TFTP 引导</title>
<para
>在 Alpha 上，您必须通过 <userinput
>-file</userinput
> 参数将文件名(与启动引导映像目录的相对路径形式)指定给 SRM 的<userinput
>boot</userinput
> 命令，或者设置 <userinput
>BOOT_FILE</userinput
> 环境变量。或者，也可以通过 BOOTP 给出文件名(在 ISC 的 <command
>dhcpd</command
> 中，使用 <userinput
>filename</userinput
> 指令)。与 Open Firmware 不同的是，这里的 SRM 中<emphasis
>没有缺省文件名</emphasis
>，因此您 <emphasis
>必须</emphasis
> 通过以上方法之一来指定一个文件名。 </para>
   </sect3>

   <sect3 arch="sparc">
   <title
>SPARC TFTP 引导</title>
<para
>SPARC 体系通常使用子体系名称，比如<quote
>SUN4M</quote
>或者<quote
>SUN4C</quote
>。在某些情况下，体系名字也被留为空白，这时客户端所需要的文件仅仅是 <filename
>client-ip-in-hex</filename
>。因此，如果您的系统子体系是 SUN4C，其 IP 是 192.168.1.3，则文件名为 <filename
>C0A80103.SUN4C</filename
>。一个简易的确认方法是在 shell 中输入下列命令(假设机器的 IP 为 10.0.0.4)。<informalexample
><screen>
$ printf '%.2x%.2x%.2x%.2x\n' 10 0 0 4
</screen
></informalexample
> 它将 IP 写成十六进制。要得到正确的文件名，您应该将所有的子母改成大写，并在必要时加上子体系名。 </para
><para
>您也可以通过把一个特定的文件名附加到 OpenPROM boot 命令的结尾来强制某些 SPARC 系统使用它。比如 <userinput
>boot net my-sparc.image</userinput
>。不过它仍然必须被请放置在 TFTP 服务器要查找的目录中。 </para>
   </sect3>

   <sect3 arch="m68k">
   <title
>BVM/Motorola TFTP 引导</title>
<para
>对于 BVM 以及 Motorola VMEbus 系统来说，请先将 &bvme6000-tftp-files; 文件拷贝到 <filename
>/tftpboot/</filename
>。 </para
><para
>接下来，配置您的启动引导 ROM 或 BOOTP 服务器，使其从 TFTP 服务器中初始装入 <filename
>tftplilo.bvme</filename
> 或者 <filename
>tftplilo.mvme</filename
> 文件。请阅读 <filename
>tftplilo.txt</filename
> 文件来获得更多的关于您所使用的子体系的系统特殊配置信息。 </para>
   </sect3>

   <sect3 arch="mips">
   <title
>SGI Indys TFTP 引导</title>
<para
>在 SGI Indys 上您可以采用 <command
>bootpd</command
> 来给出 FTFP 文件的名字。它既可以是以 <userinput
>bf=</userinput
> 形式在 <filename
>/etc/bootptab</filename
> 文件中设定，也可以是以 <userinput
>filename=</userinput
> 选项形式出现于 <filename
>/etc/dhcpd.conf</filename
>。 </para>
   </sect3>

   <sect3 arch="mips">
   <title
>Broadcom BCM91250A TFTP 引导</title>
<para
>您不需要通过特殊方法配置 DHCP，因为您将传递文件的完全路径至装载的 CFE 。 </para>
   </sect3>

  </sect2>

<!-- FIXME: commented out since it seems too old to be usable and a current
            way is not known

  <sect2 id="tftp-low-memory">
  <title
>TFTP Installation for Low-Memory Systems</title>
<para>

On some systems, the standard installation RAMdisk, combined with the
memory requirements of the TFTP boot image, cannot fit in memory.  In
this case, you can still install using TFTP, you'll just have to go
through the additional step of NFS mounting your root directory over
the network as well.  This type of setup is also appropriate for
diskless or dataless clients.

</para
><para>

First, follow all the steps above in <xref linkend="install-tftp"/>.

<orderedlist>
<listitem
><para>

Copy the Linux kernel image on your TFTP server using the
<userinput
>a.out</userinput
> image for the architecture you are
booting.

</para
></listitem>
<listitem
><para>

Untar the root archive on your NFS server (can be the same system as
your TFTP server):

<informalexample
><screen
>
# cd /tftpboot
# tar xvzf root.tar.gz
</screen
></informalexample>

Be sure to use the GNU <command
>tar</command
> (other tar programs, like the
SunOS one, badly handle devices as plain files).

</para
></listitem>
<listitem
><para>

Export your <filename
>/tftpboot/debian-sparc-root</filename
> directory
with root access to your client.  E.g., add the following line to
<filename
>/etc/exports</filename
> (GNU/Linux syntax, should be similar
for SunOS):

<informalexample
><screen
>
/tftpboot/debian-sparc-root <replaceable>client</replaceable>(rw,no_root_squash)
</screen
></informalexample>

NOTE: <replaceable
>client</replaceable
> is the host name or IP address recognized
by the server for the system you are booting.

</para
></listitem>
<listitem
><para>

Create a symbolic link from your client IP address in dotted notation
to <filename
>debian-sparc-root</filename
> in the
<filename
>/tftpboot</filename
> directory.  For example, if the client
IP address is 192.168.1.3, do

<informalexample
><screen
>
# ln -s debian-sparc-root 192.168.1.3
</screen
></informalexample>

</para
></listitem>
</orderedlist>

</para>

  </sect2>

  <sect2 condition="supports-nfsroot">
  <title
>Installing with TFTP and NFS Root</title>
<para>

Installing with TFTP and NFS Root is similar to
<xref linkend="tftp-low-memory"/> because you don't want to
load the RAMdisk anymore but boot from the newly created NFS-root file
system.  You then need to replace the symlink to the tftpboot image by
a symlink to the kernel image (for example,
<filename
>linux-a.out</filename
>).

</para
><para>

RARP/TFTP requires all daemons to be running on the same server (the
workstation is sending a TFTP request back to the server that replied
to its previous RARP request).

</para>


  </sect2>
END FIXME -->
 </sect1>
<!--   End of file install-methods/install-tftp.xml -->

<!-- Start of file install-methods/automatic-install.xml -->

 <sect1 id="automatic-install">
 <title
>自动化安装</title>
<para
>对于有多台需要安装的计算机的情况，可以采用全自动安装的方式。用于此项任务的 Debian 软件包有 <classname
>fai</classname
>(需要使用一台安装服务器)，<classname
>replicator</classname
>、<classname
>systemimager</classname
>、<classname
>autoinstall</classname
>，以及 Debian 安装程序本身。 </para>

  <sect2 id="preseed">
  <title
>使用 Debian 安装程序进行自动安装</title>
<para
>Debian 安装程序支持使用预先配置的文件进行自动安装。预配置文件可以从网络或移动介质上加载，并自动回答安装过程中的问题。 </para
><para condition="etch"
>在 <xref linkend="appendix-preseed"/> 是有关预置文件的完整文档，并有一些可以使用的例子供您修改。 </para
><para condition="sarge"
>虽然大多数 &d-i; 使用的对话框可以用这种方法预置，但还是有明显的例外。您可以(重新)分区整个硬盘或使用磁盘上可用的闲置空间; 但无法使用已存在的分区。当前还无法预先设置 RAID 和 LVM。还有，除了网络驱动模块，也无法预先设置内核模块参数。 </para
><para condition="sarge"
>预配置文件是按照 debconf-set-selections 命令的格式写成的。这里有一个具有详尽注释并能正常工作的预配置文件例子：<xref linkend="example-preseed"/>。 </para
><para condition="sarge"
>除此之外，要得到一个包含所有可被预设置的项目的完整文件，您可以进行手动安装，然后使用 <filename
>debconf-get-selections</filename
> 命令(它来自 <classname
>debconf-utils</classname
>软件包)将 debconf 数据库和位于 /var/log/debian-installer/cdebconf 的 cdebconf 数据库的内容导出至一个单一的文件： <informalexample
><screen>
$ debconf-get-selections --installer &gt; <replaceable
>文件</replaceable>
$ debconf-get-selections &gt;&gt; <replaceable
>文件</replaceable>
</screen
></informalexample
> 但是，按照这些方法生成的文件将会包含一些不应该被预设置的项目，因此 <xref linkend="example-preseed"/> 中的文件对于大多数用户来说是一个更好的起点。 </para
><para condition="sarge"
>一旦您有了一个预配置文件，可以在需要时编辑它，并且上传至一个 web 服务器，或者拷贝至安装程序的启动引导介质。无论您将此文件放置在哪里，都需要在启动安装程序时向它传递一个参数来告诉它使用这个文件。 </para
><para condition="sarge"
>要让安装程序使用一个从网络下载的预配置文件，请将 preseed/url=http://url/to/config 加入内核启动参数。当然这个预配置文件，只有安装程序能够管理网络并下载文件后才能起作用，因此如果安装程序能够通过 DHCP 设置网络而不需要询问任何问题的话，此方法会更有用。如果您已经被设置好了网络，可能还会想将安装优先级调至关键来避免任何提问。请参见 <xref linkend="installer-args"/>。 </para
><para condition="sarge"
>要将预配置文件放置在光盘中，您将需要重新生成 ISO 映像以包括您的预配置文件。请阅读 mkisofs 的手册来获得细节信息。另外，您也可以将预配置文件放置在一张软盘中，然后使用 preseed/file=/floppy/preseed.cfg 参数。 </para
><para arch="i386" condition="sarge"
>如果您要从 USB 闪盘上启动，那您可以简单拷贝您的预配置文件至闪盘的文件系统中，并编辑 syslinux.cfg 文件来加入 preseed/file=/hd-media/preseed.cfg 至内核启动参数。 </para>
  </sect2>
 </sect1>
<!--   End of file install-methods/automatic-install.xml -->

</chapter>
<!--   End of file install-methods/install-methods.xml -->
